#Контрольное задание 5

#задание 1

from datetime import datetime, date

class Person(object):

    def __init__(self, surname, firstname, birthdate, nickname=None):

        self.surname = surname

        self.first_name = firstname

        self.nickname = surname if nickname is None else nickname

        date_format = "%Y-%m-%d"

        datetime_object = datetime.strptime(birthdate, date_format)

        self.birth_date = datetime_object.date()



    def get_age(self):

        today = date.today()

        delta_in_days = today - self.birth_date

        return str(int(delta_in_days.days / 365.25))



    def get_fullname(self):

        return "{0} {1}".format(self.surname, self.first_name)

#задание 2

import csv

def find_oldest_person(filename):

    with open(filename, 'r') as fr:

        reader_dict = csv.DictReader(fr)

        edest_person = None

        for row_dict in reader_dict:

            surname = row_dict['surname']

            name = row_dict['name']

            birthdate = row_dict['birthdate']

            nickname = row_dict['nickname']

            person = Person(surname, name, birthdate, nickname)

            if edest_person is None or int(edest_person.get_age()) < int(person.get_age()):

                edest_person = person

    return edest_person and edest_person.get_fullname()

#Контрольное задание 6

#задание 1

class Student(object):

    def __init__(self, name, conf):

        self.name = name

        self.lab_max = conf['lab_max']

        self.lab_num = conf['lab_num']

        self.labs = [0] * self.lab_num



    def set_lab(self, score, number=None):

        if number is None and 0 in self.labs:

            number = self.labs.index(0)

        if number is None or number >= self.lab_num:

            return 'error'

        self.labs[number] = score if score <= self.lab_max else self.lab_max



    def average_score(self):

        return round(sum(self.labs) / float(self.lab_num), 1)

#задание 2

import csv

def find_best_student(filename):

    with open(filename, 'r') as fr:

        reader_dict = csv.DictReader(fr)

        best_student = None

        for row_dict in reader_dict:

            name = row_dict['name']

            lab_max = int(row_dict['lab_max'])

            lab_num = int(row_dict['lab_num'])

            l1 = int(row_dict['l1'])

            l2 = int(row_dict['l2'])

            l3 = int(row_dict['l3'])

            l4 = int(row_dict['l4'])



            student = Student(name, {'lab_max': lab_max, 'lab_num': lab_num})

            student.set_lab(l1)

            student.set_lab(l2)

            student.set_lab(l3)

            student.set_lab(l4)

            if best_student is None or best_student.average_score() < student.average_score():

                best_student = student

    return best_student.name